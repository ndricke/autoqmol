#!/usr/bin/env python

from rdkit import Chem


def binding_site_fragment(m):
    
    """
    arguments: mol object
        
    returns: a list of new mol objects
        
    this function takes a mol object with O2 bound to it and returns a list of one or two mol objects
    of the fragments made up of the connection atom, next neighbors and next nearest neighbors (two objects
    if O2 binds through both O atoms), and a set of all the indices of the atoms making up the aforementioned
    fragments
    
    !!! this assumes that there is only one -O-O- FG in the molecule (i.e. the one from binding O2) 
    OR that the mol object is generated by the algorithm (i.e. the O atoms are the last two in the list) !!!
    
    !!!Use lines 31-44 to manually look for two O atoms bound together; use line 47 if the O atoms are the last
    ones!!!
    """
    
    O_idx_list=[]
    frag_list=[]
    mw=Chem.RWMol(m)
    all_atoms_to_keep=[]
    
    #find O atoms that are bound to another O atom and any other atom that is not O or H
#    bound_O_count=0
#    for atom in mw.GetAtoms():
#        #print('current atom: '+atom.GetSymbol()+' '+str(atom.GetIdx()))
#        if atom.GetSymbol()=='O':
#            found_O_ngb=False;
#            found_cn_ngb=False;
#            for ngb in atom.GetNeighbors():
#                if ngb.GetSymbol()=='O':
#                    found_O_ngb=True
#                elif ngb.GetSymbol()!='H':
#                    found_cn_ngb=True
#            if found_O_ngb and found_cn_ngb:
#                bound_O_count=bound_O_count+1
#                O_idx_list.append(atom.GetIdx())
                
    #if the mol object is generated by add_o2_frozen, the O atoms we are looking for will be the last two atoms
    O_idx_list.extend([len(mw.GetAtoms())-1,len(mw.GetAtoms())-2])

    for O_idx in O_idx_list:
        mw=Chem.RWMol(m)
        atoms_to_keep=[]
        
        for ngb in mw.GetAtomWithIdx(O_idx).GetNeighbors():
            #print('current ngb: '+ngb.GetSymbol()+' '+str(ngb.GetIdx()))
            if ngb.GetSymbol()!='O':
                cn_idx=ngb.GetIdx()
            else:
                ngb_O_idx=ngb.GetIdx()
        
        #add the two O atoms and the connection atom to the list
        atoms_to_keep.extend([O_idx,cn_idx,ngb_O_idx])
        
        #add neighbors and next nearest neighbors to list
        for ngb in mw.GetAtomWithIdx(cn_idx).GetNeighbors():
            if ngb.GetIdx() not in atoms_to_keep:
                atoms_to_keep.append(ngb.GetIdx())
            for nngb in ngb.GetNeighbors():
                if nngb.GetIdx() not in atoms_to_keep:
                        atoms_to_keep.append(nngb.GetIdx())
        
        #print(atoms_to_keep)
        
        #go through the atoms in the molecule in reverse order (so that when we eliminate one atom that is not
        #in the atoms_to_keep list, the other atoms in the list keep their indices)
        for i in range(len(m.GetAtoms())-1,-1,-1):
            #print(i)
            if i not in atoms_to_keep:
                mw.RemoveAtom(i)
        frag_list.append(mw)
        all_atoms_to_keep.extend(atoms_to_keep)
    #print(all_atoms_to_keep)
    all_atoms_to_keep=set(all_atoms_to_keep)
    #print(all_atoms_to_keep)
    frag_list.append(all_atoms_to_keep)
    return frag_list
        
"""
def findTertiaryNitrogen(molecule):

def pyridO2sites():            

    tertNs = findTertiaryNitrogen(mw)

    #Find the C neighbor that is part of the target ring (reactive fragment)
    for N in tertNs:
        for ngb in mw.GetAtomWithIdx(N).GetNeighbors():
            #print(ngb.GetIdx(),ngb.GetSymbol())
            if ngb.GetSymbol()=='C':
                ngb_idx=ngb.GetIdx()
                #print('the ngb idx is '+str(ngb_idx))
                break
        
"""            
            
